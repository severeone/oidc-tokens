package co.kernelnetworks.oidc.auth.tokens.gen;

import com.nimbusds.jose.EncryptionMethod;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import java.security.NoSuchAlgorithmException;
import java.util.Base64;

/**
 * OpenID Connect Access Token Key Generator.
 *
 * <p>Generates AES keys for Access Tokens encryption.
 */
public class AccessTokenKeyGenerator {

	/**
	 * The Key length in bits
	 */
	public static final int KEY_BIT_LENGTH = EncryptionMethod.A128CBC_HS256.cekBitLength();

	/**
	 * The encryption algorithm name
	 */
	public static final String ALGORITHM_NAME = "AES";

	/**
	 * Generates a key for Access Token encryption.
	 *
	 * @return An Access Token key.
	 */
	public static String generate() throws NoSuchAlgorithmException {
		KeyGenerator keyGen;
        keyGen = KeyGenerator.getInstance(ALGORITHM_NAME);
		keyGen.init(KEY_BIT_LENGTH);
		SecretKey secretKey = keyGen.generateKey();
		return Base64.getEncoder().encodeToString(secretKey.getEncoded());
	}

	/**
	 * Checks if the given string has the format of keys generated by this generator.
	 *
	 * @param key A string to check.
	 *
	 * @return {@code true} if the string has the right format, {@code false} otherwise.
	 */
	public static boolean checkFormat(final String key) {
		try {
			byte[] decodedKey = Base64.getDecoder().decode(key);
			new SecretKeySpec(decodedKey, 0, decodedKey.length, ALGORITHM_NAME);
		} catch (Exception e) {
			return false;
		}
		return true;
	}
}
